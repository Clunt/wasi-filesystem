package wasi:filesystem@0.2.0;
/// WASI filesystem主要是文件系统API，
/// 旨在让用户在其现有文件系统上，运行访问其文件的WASI程序，
/// 而不会产生大量的额外开销。
///
/// 它旨在在Unix系列平台和Windows之间大致可移植，尽管它并未隐藏许多主要差异。
///
/// 路径作为接口类型`string`传递，
/// 意味着它们必须由一系列Unicode标量值（Unicode Scalar Values, USVs）组成。
/// 有些文件系统可能包含此API无法访问的路径。
///
/// WASI中的目录分隔符总是正斜杠（`/`）。
///
/// WASI中的所有路径都是相对路径，并且相对于引用基目录的`descriptor`进行解释。
/// 如果WASI函数的`path`参数以`/`开头，或者解析`path`的任意步骤中，
/// 包括`..`和符号连接阶段到达基目录外的目录，或到达底层文件系统中绝对路径或根路径的符号连接，
/// 该函数将以`error-code::not-permitted`失败。
///
/// 关于WASI路径解析和沙盒化的更多信息，请参阅[WASI文件系统路径解析][WASI filesystem path resolution].
///
/// [WASI filesystem path resolution]: https://github.com/Clunt/wasi-filesystem/blob/main/path-resolution.md
@since(version = 0.2.0)
interface types {
    @since(version = 0.2.0)
    use wasi:io/streams@0.2.0.{input-stream, output-stream, error};
    @since(version = 0.2.0)
    use wasi:clocks/wall-clock@0.2.0.{datetime};

    /// 文件大小或文件内区域的长度。
    @since(version = 0.2.0)
    type filesize = u64;

    /// descriptor(描述符)引用的文件系统对象的类型。
    ///
    /// 注意：在WASI的早期版本中，这被称为`filetype`。
    @since(version = 0.2.0)
    enum descriptor-type {
        /// descriptor(描述符)或file(文件)的类型未知或与指定的任何其他类型不同。
        unknown,
        /// 描述符引用一个块设备索引节点(a block device inode)
        block-device,
        /// 描述符引用一个字节设备索引节点(a character device inode)。
        character-device,
        /// 描述符引用一个目录索引节点(a directory inode)。
        directory,
        /// 描述符引用一个命名管道(a named pipe)。
        fifo,
        /// 描述符引用一个符号连接索引节点(a symbolic link inode)。
        symbolic-link,
        /// 描述符引用一个常规文件索引节点(a regular file inode)。
        regular-file,
        /// 描述符引用一个套接字(a socket)。
        socket,
    }

    /// 描述符标志。
    ///
    /// 注意：在WASI的早期版本中，这被称为`fdflags`。
    @since(version = 0.2.0)
    flags descriptor-flags {
        /// 读模式：数据可读。
        read,
        /// 写模式：数据可写。
        write,
        /// 请求(request)根据同步I/O文件完整性完成来执行写操作。
        /// 存储在文件和文件元数据(metadata)中的数据会被同步。
        /// 这类似于POSIX中`O_SYNC`。
        ///
        /// WASI尚未定义此操作的精确语义。目前，它应被解析为请求(request)，而不是要求(requirement)。
        /// file-integrity-sync，请求(request)根据同步I/O数据完整性完成来执行写操作。
        /// 只有存储在文件中的数据被同步，这类似于POSIX中`O_DSYNC`。
        ///
        /// WASI尚未定义此操作的精确语义。目前，它应被解析为请求(request)，而不是要求(requirement)。
        /// data-integrity-sync，请求(request)以写操作同级别的完整性来执行读操作。
        /// 这类似于POSIX中`O_RSYNC`。
        ///
        /// WASI尚未定义此操作的精确语义。目前，它应被解析为请求(request)，而不是要求(requirement)。
        /// requested-write-sync，更改目录模式(Mutating directories mode)：目录内容可能会发生变化。
        ///
        /// 当这个标志在描述符上未设置时，
        /// 使用描述符的操作将创建、重命名、删除、修改文件系统对象的数据或元数据，或获取允许这些操作的另一个句柄，
        /// 如果它们本来会成功的话，则将以`error-code::read-only`失败。
        ///
        /// 这只能在目录上设置。
        mutate-directory,
    }

    /// 文件属性(File attributes)。
    ///
    /// 注意：在WASI的早期版本中，这被称为`filestat`。
    @since(version = 0.2.0)
    record descriptor-stat {
        /// 文件类型(File type)。
        %type: descriptor-type,
        /// 文件硬链接数量(Number of hard links to the file)。
        link-count: link-count,
        /// 对于普通文件，指的是以字节为单位的文件大小。
        /// 对于符号链接，指的是符号链接中包含的路径名(pathname)的字节长度。
        size: filesize,
        /// 最后一次数据访问时间戳。
        ///
        /// 如果`option`为none，则平台不维护该文件的访问时间戳。
        data-access-timestamp: option<datetime>,
        /// 最后一次数据修改时间戳。
        ///
        /// 如果`option`为none，则平台不维护该文件的修改时间戳。
        data-modification-timestamp: option<datetime>,
        /// 最后一次文件状态更改时间戳。
        ///
        /// 如果`option`为none，则平台不维护该文件的状态更改时间戳。
        status-change-timestamp: option<datetime>,
    }

    /// 确定路径解析方法的标志。
    @since(version = 0.2.0)
    flags path-flags {
        /// 只要解析的路径对应符号链接，它就被展开。
        symlink-follow,
    }

    /// 用于`open-at`的打开标志。
    @since(version = 0.2.0)
    flags open-flags {
        /// 如果文件不存在则创建，类似于POSIX中的`O_CREAT`。
        create,
        /// 如果不是目录则失败，类似于POSIX中的`O_DIRECTORY`。
        directory,
        /// 如果文件已存在则失败，类似于POSIX中的`O_EXCL`。
        exclusive,
        /// 文件尺寸截断为0，类似于POSIX中的`O_TRUNC`。
        truncate,
    }

    /// 指向索引节点(inode)的硬链接(hard links)数量。
    @since(version = 0.2.0)
    type link-count = u64;

    /// 当设置时间戳时，它表示要设置的值。
    @since(version = 0.2.0)
    variant new-timestamp {
        /// 将时间戳设置为之前的值。
        no-change,
        /// 将时间戳设置为与文件系统关联的系统时钟的当前时间。
        now,
        /// 将时间戳设置为给定值。
        timestamp(datetime),
    }

    /// 目录项。
    record directory-entry {
        /// 该目录项引用的文件类型。
        %type: descriptor-type,

        /// 对象名称。
        name: string,
    }

    /// 函数返回的错误码，类似于POSIX中的`errno`。
    /// 并非所有这些错误码都由此API提供的函数返回；
    /// 其中一些用于更高级库层，而其他一些仅用于与POSIX对齐。
    enum error-code {
        /// 权限被拒绝，类似于POSIX中的`EACCES`。
        access,
        /// 资源不可用，或操作将阻塞，类似于POSIX中的`EAGAIN`和`EWOULDBLOCK`。
        would-block,
        /// 连接已在进行中，类似于POSIX中的`EALREADY`。
        already,
        /// 错误的描述符，类似于POSIX中的`EBADF`。
        bad-descriptor,
        /// 设备或资源繁忙，类似于POSIX中的`EBUSY`。
        busy,
        /// 资源死锁将发生，类似于POSIX中的`EDEADLK`。
        deadlock,
        /// 超出存储配额，类似于POSIX中的`EDQUOT`。
        quota,
        /// 文件存在，类似于POSIX中的`EEXIST`。
        exist,
        /// 文件过大，类似于POSIX中的`EFBIG`。
        file-too-large,
        /// 非法字符序列，类似于POSIX中的`EILSEQ`。
        illegal-byte-sequence,
        /// 进行中的操作，类似于POSIX中的`EINPROGRESS`。
        in-progress,
        /// 中断函数，类似于POSIX中的`EINTR`。
        interrupted,
        /// 无效参数，类似于POSIX中的`EINVAL`。
        invalid,
        /// I/O错误，类似于POSIX中的`EIO`。
        io,
        /// 是一个目录，类似于POSIX中的`EISDIR`。
        is-directory,
        /// 符号链接层级过多，类似于POSIX中的`ELOOP`。
        loop,
        /// 链接过多，类似于POSIX中的`EMLINK`。
        too-many-links,
        /// 消息过大，类似于POSIX中的`EMSGSIZE`。
        message-size,
        /// 文件名过长，类似于POSIX中的`ENAMETOOLONG`。
        name-too-long,
        /// 无此设备，类似于POSIX中的`ENODEV`。
        no-device,
        /// 无此文件或目录，类似于POSIX中的`ENOENT`。
        no-entry,
        /// 无可用锁，类似于POSIX中的`ENOLCK`。
        no-lock,
        /// 空间不足，类似于POSIX中的`ENOMEM`。
        insufficient-memory,
        /// 设备上无剩余空间，类似于POSIX中的`ENOSPC`。
        insufficient-space,
        /// 不是目录或指向目录的符号链接，类似于POSIX中的`ENOTDIR`。
        not-directory,
        /// 目录非空，类似于POSIX中的`ENOTEMPTY`。
        not-empty,
        /// 状态无法恢复，类似于POSIX中的`ENOTRECOVERABLE`。
        not-recoverable,
        /// 不支持，类似于POSIX中的`ENOTSUP`和`ENOSYS`。
        unsupported,
        /// 不适当的I/O控制操作，类似于POSIX中的`ENOTTY`。
        no-tty,
        /// 无此设备或地址，类似于POSIX中的`ENXIO`。
        no-such-device,
        /// 值过大无法存储在数据类型中，类似于POSIX中的`EOVERFLOW`。
        overflow,
        /// 操作不允许，类似于POSIX中的`EPERM`。
        not-permitted,
        /// 管道中断，类似于POSIX中的`EPIPE`。
        pipe,
        /// 只读文件系统，类似于POSIX中的`EROFS`。
        read-only,
        /// 无效查找，类似于POSIX中的`ESPIPE`。
        invalid-seek,
        /// 文本文件繁忙，类似于POSIX中的`ETXTBSY`。
        text-file-busy,
        /// 跨设备链接，类似于POSIX中的`EXDEV`。
        cross-device,
    }

    /// 文件或内存访问模式的建议信息。
    @since(version = 0.2.0)
    enum advice {
        /// 应用程序对其与指定数据相关的行为没有建议。
        normal,
        /// 应用程序期望以低偏移量到高偏移量顺序访问指定的数据。
        sequential,
        /// 应用程序期望以随机顺序访问指定的数据。
        random,
        /// 应用程序期望在不久的将来访问指定的数据。
        will-need,
        /// 应用程序预计在不久的将来不会访问指定的数据。
        dont-need,
        /// 应用程序期望访问指定的数据一次，然后不再使用它。
        no-reuse,
    }

    /// 一个128位的哈希值，因为wasm没有128位的整数类型而被分成几个部分。
    @since(version = 0.2.0)
    record metadata-hash-value {
       /// 128位哈希值中的64位。
       lower: u64,
       /// 128位哈希值中的另外64位。
       upper: u64,
    }

    /// 描述符是对文件系统对象的引用，该对象可以是文件、目录、命名管道、特殊文件或可以对其进行文件系统调用的其他对象。
    @since(version = 0.2.0)
    resource descriptor {
        /// 如果可用，返回用于读取文件的流。
        ///
        /// 可能会以error-code失败，描述为什么无法读取文件。
        ///
        /// 多个读、写和追加流可能活动于同一个打开的文件，并且它们不会相互干扰。
        ///
        /// 注意：其允许使用`read-stream`，类似于POSIX中的`read`。
        @since(version = 0.2.0)
        read-via-stream: func(
            /// 开始读取文件的偏移量。
            offset: filesize,
        ) -> result<input-stream, error-code>;

        /// 如果可用，返回用于写入文件的流。
        ///
        /// 可能会以error-code失败，描述为什么无法写入文件。
        ///
        /// 注意：其允许使用`write-stream`，类似于POSIX中的`write`。
        @since(version = 0.2.0)
        write-via-stream: func(
            /// 开始写入文件的偏移量。
            offset: filesize,
        ) -> result<output-stream, error-code>;

        /// 如果可用，返回用于追加文件的流。
        ///
        /// 可能会以error-code失败，描述为什么无法追加文件。
        ///
        /// 注意：其允许使用`write-stream`，类似于POSIX中的`write`。
        @since(version = 0.2.0)
        append-via-stream: func() -> result<output-stream, error-code>;

        /// 在描述符上提供文件建议信息。
        ///
        /// 类似于POSIX中的`posix_fadvise`。
        @since(version = 0.2.0)
        advise: func(
            /// 建议适用的文件内偏移量。
            offset: filesize,
            /// 建议适用的区域(region)的长度。
            length: filesize,
            /// The advice.
            advice: advice
        ) -> result<_, error-code>;

        /// 同步文件数据至磁盘。
        ///
        /// 如果文件描述符未打开写入，则此函数会成功但没有效果。
        ///
        /// 注意：其类似于POSIX中的`fdatasync`。
        @since(version = 0.2.0)
        sync-data: func() -> result<_, error-code>;

        /// 获取与描述符关联的标志。
        ///
        /// 注意：其返回的标志类似于POSIX中的`fcntl(fd, F_GETFL)`。
        ///
        /// 注意：该值在WASI的早期版本中是`fdstat_get`的返回值`fs_flags`。
        @since(version = 0.2.0)
        get-flags: func() -> result<descriptor-flags, error-code>;

        /// 获取描述符的动态类型。
        ///
        /// Note: This returns the same value as the `type` field of the `fd-stat`
        /// returned by `stat`, `stat-at` and similar.
        ///
        /// Note: This returns similar flags to the `st_mode & S_IFMT` value provided
        /// by `fstat` in POSIX.
        ///
        /// Note: This returns the value that was the `fs_filetype` value returned
        /// from `fdstat_get` in earlier versions of WASI.
        @since(version = 0.2.0)
        get-type: func() -> result<descriptor-type, error-code>;

        /// Adjust the size of an open file. If this increases the file's size, the
        /// extra bytes are filled with zeros.
        ///
        /// Note: This was called `fd_filestat_set_size` in earlier versions of WASI.
        @since(version = 0.2.0)
        set-size: func(size: filesize) -> result<_, error-code>;

        /// Adjust the timestamps of an open file or directory.
        ///
        /// Note: This is similar to `futimens` in POSIX.
        ///
        /// Note: This was called `fd_filestat_set_times` in earlier versions of WASI.
        @since(version = 0.2.0)
        set-times: func(
            /// The desired values of the data access timestamp.
            data-access-timestamp: new-timestamp,
            /// The desired values of the data modification timestamp.
            data-modification-timestamp: new-timestamp,
        ) -> result<_, error-code>;

        /// Read from a descriptor, without using and updating the descriptor's offset.
        ///
        /// This function returns a list of bytes containing the data that was
        /// read, along with a bool which, when true, indicates that the end of the
        /// file was reached. The returned list will contain up to `length` bytes; it
        /// may return fewer than requested, if the end of the file is reached or
        /// if the I/O operation is interrupted.
        ///
        /// In the future, this may change to return a `stream<u8, error-code>`.
        ///
        /// Note: This is similar to `pread` in POSIX.
        @since(version = 0.2.0)
        read: func(
            /// The maximum number of bytes to read.
            length: filesize,
            /// The offset within the file at which to read.
            offset: filesize,
        ) -> result<tuple<list<u8>, bool>, error-code>;

        /// Write to a descriptor, without using and updating the descriptor's offset.
        ///
        /// It is valid to write past the end of a file; the file is extended to the
        /// extent of the write, with bytes between the previous end and the start of
        /// the write set to zero.
        ///
        /// In the future, this may change to take a `stream<u8, error-code>`.
        ///
        /// Note: This is similar to `pwrite` in POSIX.
        @since(version = 0.2.0)
        write: func(
            /// Data to write
            buffer: list<u8>,
            /// The offset within the file at which to write.
            offset: filesize,
        ) -> result<filesize, error-code>;

        /// Read directory entries from a directory.
        ///
        /// On filesystems where directories contain entries referring to themselves
        /// and their parents, often named `.` and `..` respectively, these entries
        /// are omitted.
        ///
        /// This always returns a new stream which starts at the beginning of the
        /// directory. Multiple streams may be active on the same directory, and they
        /// do not interfere with each other.
        @since(version = 0.2.0)
        read-directory: func() -> result<directory-entry-stream, error-code>;

        /// Synchronize the data and metadata of a file to disk.
        ///
        /// This function succeeds with no effect if the file descriptor is not
        /// opened for writing.
        ///
        /// Note: This is similar to `fsync` in POSIX.
        @since(version = 0.2.0)
        sync: func() -> result<_, error-code>;

        /// Create a directory.
        ///
        /// Note: This is similar to `mkdirat` in POSIX.
        @since(version = 0.2.0)
        create-directory-at: func(
            /// The relative path at which to create the directory.
            path: string,
        ) -> result<_, error-code>;

        /// Return the attributes of an open file or directory.
        ///
        /// Note: This is similar to `fstat` in POSIX, except that it does not return
        /// device and inode information. For testing whether two descriptors refer to
        /// the same underlying filesystem object, use `is-same-object`. To obtain
        /// additional data that can be used do determine whether a file has been
        /// modified, use `metadata-hash`.
        ///
        /// Note: This was called `fd_filestat_get` in earlier versions of WASI.
        @since(version = 0.2.0)
        stat: func() -> result<descriptor-stat, error-code>;

        /// Return the attributes of a file or directory.
        ///
        /// Note: This is similar to `fstatat` in POSIX, except that it does not
        /// return device and inode information. See the `stat` description for a
        /// discussion of alternatives.
        ///
        /// Note: This was called `path_filestat_get` in earlier versions of WASI.
        @since(version = 0.2.0)
        stat-at: func(
            /// Flags determining the method of how the path is resolved.
            path-flags: path-flags,
            /// The relative path of the file or directory to inspect.
            path: string,
        ) -> result<descriptor-stat, error-code>;

        /// Adjust the timestamps of a file or directory.
        ///
        /// Note: This is similar to `utimensat` in POSIX.
        ///
        /// Note: This was called `path_filestat_set_times` in earlier versions of
        /// WASI.
        @since(version = 0.2.0)
        set-times-at: func(
            /// Flags determining the method of how the path is resolved.
            path-flags: path-flags,
            /// The relative path of the file or directory to operate on.
            path: string,
            /// The desired values of the data access timestamp.
            data-access-timestamp: new-timestamp,
            /// The desired values of the data modification timestamp.
            data-modification-timestamp: new-timestamp,
        ) -> result<_, error-code>;

        /// Create a hard link.
        ///
        /// Note: This is similar to `linkat` in POSIX.
        @since(version = 0.2.0)
        link-at: func(
            /// Flags determining the method of how the path is resolved.
            old-path-flags: path-flags,
            /// The relative source path from which to link.
            old-path: string,
            /// The base directory for `new-path`.
            new-descriptor: borrow<descriptor>,
            /// The relative destination path at which to create the hard link.
            new-path: string,
        ) -> result<_, error-code>;

        /// Open a file or directory.
        ///
        /// The returned descriptor is not guaranteed to be the lowest-numbered
        /// descriptor not currently open/ it is randomized to prevent applications
        /// from depending on making assumptions about indexes, since this is
        /// error-prone in multi-threaded contexts. The returned descriptor is
        /// guaranteed to be less than 2**31.
        ///
        /// If `flags` contains `descriptor-flags::mutate-directory`, and the base
        /// descriptor doesn't have `descriptor-flags::mutate-directory` set,
        /// `open-at` fails with `error-code::read-only`.
        ///
        /// If `flags` contains `write` or `mutate-directory`, or `open-flags`
        /// contains `truncate` or `create`, and the base descriptor doesn't have
        /// `descriptor-flags::mutate-directory` set, `open-at` fails with
        /// `error-code::read-only`.
        ///
        /// Note: This is similar to `openat` in POSIX.
        @since(version = 0.2.0)
        open-at: func(
            /// Flags determining the method of how the path is resolved.
            path-flags: path-flags,
            /// The relative path of the object to open.
            path: string,
            /// The method by which to open the file.
            open-flags: open-flags,
            /// Flags to use for the resulting descriptor.
            %flags: descriptor-flags,
        ) -> result<descriptor, error-code>;

        /// Read the contents of a symbolic link.
        ///
        /// If the contents contain an absolute or rooted path in the underlying
        /// filesystem, this function fails with `error-code::not-permitted`.
        ///
        /// Note: This is similar to `readlinkat` in POSIX.
        @since(version = 0.2.0)
        readlink-at: func(
            /// The relative path of the symbolic link from which to read.
            path: string,
        ) -> result<string, error-code>;

        /// Remove a directory.
        ///
        /// Return `error-code::not-empty` if the directory is not empty.
        ///
        /// Note: This is similar to `unlinkat(fd, path, AT_REMOVEDIR)` in POSIX.
        @since(version = 0.2.0)
        remove-directory-at: func(
            /// The relative path to a directory to remove.
            path: string,
        ) -> result<_, error-code>;

        /// Rename a filesystem object.
        ///
        /// Note: This is similar to `renameat` in POSIX.
        @since(version = 0.2.0)
        rename-at: func(
            /// The relative source path of the file or directory to rename.
            old-path: string,
            /// The base directory for `new-path`.
            new-descriptor: borrow<descriptor>,
            /// The relative destination path to which to rename the file or directory.
            new-path: string,
        ) -> result<_, error-code>;

        /// Create a symbolic link (also known as a "symlink").
        ///
        /// If `old-path` starts with `/`, the function fails with
        /// `error-code::not-permitted`.
        ///
        /// Note: This is similar to `symlinkat` in POSIX.
        @since(version = 0.2.0)
        symlink-at: func(
            /// The contents of the symbolic link.
            old-path: string,
            /// The relative destination path at which to create the symbolic link.
            new-path: string,
        ) -> result<_, error-code>;

        /// Unlink a filesystem object that is not a directory.
        ///
        /// Return `error-code::is-directory` if the path refers to a directory.
        /// Note: This is similar to `unlinkat(fd, path, 0)` in POSIX.
        @since(version = 0.2.0)
        unlink-file-at: func(
            /// The relative path to a file to unlink.
            path: string,
        ) -> result<_, error-code>;

        /// Test whether two descriptors refer to the same filesystem object.
        ///
        /// In POSIX, this corresponds to testing whether the two descriptors have the
        /// same device (`st_dev`) and inode (`st_ino` or `d_ino`) numbers.
        /// wasi-filesystem does not expose device and inode numbers, so this function
        /// may be used instead.
        @since(version = 0.2.0)
        is-same-object: func(other: borrow<descriptor>) -> bool;

        /// Return a hash of the metadata associated with a filesystem object referred
        /// to by a descriptor.
        ///
        /// This returns a hash of the last-modification timestamp and file size, and
        /// may also include the inode number, device number, birth timestamp, and
        /// other metadata fields that may change when the file is modified or
        /// replaced. It may also include a secret value chosen by the
        /// implementation and not otherwise exposed.
        ///
        /// Implementations are encourated to provide the following properties:
        ///
        ///  - If the file is not modified or replaced, the computed hash value should
        ///    usually not change.
        ///  - If the object is modified or replaced, the computed hash value should
        ///    usually change.
        ///  - The inputs to the hash should not be easily computable from the
        ///    computed hash.
        ///
        /// However, none of these is required.
        @since(version = 0.2.0)
        metadata-hash: func() -> result<metadata-hash-value, error-code>;

        /// Return a hash of the metadata associated with a filesystem object referred
        /// to by a directory descriptor and a relative path.
        ///
        /// This performs the same hash computation as `metadata-hash`.
        @since(version = 0.2.0)
        metadata-hash-at: func(
            /// Flags determining the method of how the path is resolved.
            path-flags: path-flags,
            /// The relative path of the file or directory to inspect.
            path: string,
        ) -> result<metadata-hash-value, error-code>;
    }

    /// A stream of directory entries.
    @since(version = 0.2.0)
    resource directory-entry-stream {
        /// Read a single directory entry from a `directory-entry-stream`.
        @since(version = 0.2.0)
        read-directory-entry: func() -> result<option<directory-entry>, error-code>;
    }

    /// Attempts to extract a filesystem-related `error-code` from the stream
    /// `error` provided.
    ///
    /// Stream operations which return `stream-error::last-operation-failed`
    /// have a payload with more information about the operation that failed.
    /// This payload can be passed through to this function to see if there's
    /// filesystem-related information about the error to return.
    ///
    /// Note that this function is fallible because not all stream-related
    /// errors are filesystem-related errors.
    @since(version = 0.2.0)
    filesystem-error-code: func(err: borrow<error>) -> option<error-code>;
}
