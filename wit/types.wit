package wasi:filesystem@0.2.0;
/// WASI filesystem主要是文件系统API，
/// 旨在让用户在其现有文件系统上，运行访问其文件的WASI程序，
/// 而不会产生大量的额外开销。
///
/// 它旨在在Unix系列平台和Windows之间大致可移植，尽管它并未隐藏许多主要差异。
///
/// 路径作为接口类型`string`传递，
/// 意味着它们必须由一系列Unicode标量值（Unicode Scalar Values, USVs）组成。
/// 有些文件系统可能包含此API无法访问的路径。
///
/// WASI中的目录分隔符总是正斜杠（`/`）。
///
/// WASI中的所有路径都是相对路径，并且相对于引用基目录的`descriptor`进行解释。
/// 如果WASI函数的`path`参数以`/`开头，或者解析`path`的任意步骤中，
/// 包括`..`和符号连接阶段到达基目录外的目录，或到达底层文件系统中绝对路径或根路径的符号连接，
/// 该函数将以`error-code::not-permitted`失败。
///
/// 关于WASI路径解析和沙盒化的更多信息，请参阅[WASI文件系统路径解析][WASI filesystem path resolution].
///
/// [WASI filesystem path resolution]: https://github.com/Clunt/wasi-filesystem/blob/main/path-resolution.md
@since(version = 0.2.0)
interface types {
    @since(version = 0.2.0)
    use wasi:io/streams@0.2.0.{input-stream, output-stream, error};
    @since(version = 0.2.0)
    use wasi:clocks/wall-clock@0.2.0.{datetime};

    /// 文件大小或文件内区域的长度。
    @since(version = 0.2.0)
    type filesize = u64;

    /// descriptor(描述符)引用的文件系统对象的类型。
    ///
    /// 注意：在WASI的早期版本中，这被称为`filetype`。
    @since(version = 0.2.0)
    enum descriptor-type {
        /// descriptor(描述符)或file(文件)的类型未知或与指定的任何其他类型不同。
        unknown,
        /// 描述符引用一个块设备索引节点(a block device inode)
        block-device,
        /// 描述符引用一个字节设备索引节点(a character device inode)。
        character-device,
        /// 描述符引用一个目录索引节点(a directory inode)。
        directory,
        /// 描述符引用一个命名管道(a named pipe)。
        fifo,
        /// 描述符引用一个符号连接索引节点(a symbolic link inode)。
        symbolic-link,
        /// 描述符引用一个常规文件索引节点(a regular file inode)。
        regular-file,
        /// 描述符引用一个套接字(a socket)。
        socket,
    }

    /// 描述符标志。
    ///
    /// 注意：在WASI的早期版本中，这被称为`fdflags`。
    @since(version = 0.2.0)
    flags descriptor-flags {
        /// 读模式：数据可读。
        read,
        /// 写模式：数据可写。
        write,
        /// 请求(request)根据同步I/O文件完整性完成来执行写操作。
        /// 存储在文件和文件元数据(metadata)中的数据会被同步。
        /// 这类似于POSIX中`O_SYNC`。
        ///
        /// WASI尚未定义此操作的精确语义。目前，它应被解析为请求(request)，而不是要求(requirement)。
        /// file-integrity-sync，请求(request)根据同步I/O数据完整性完成来执行写操作。
        /// 只有存储在文件中的数据被同步，这类似于POSIX中`O_DSYNC`。
        ///
        /// WASI尚未定义此操作的精确语义。目前，它应被解析为请求(request)，而不是要求(requirement)。
        /// data-integrity-sync，请求(request)以写操作同级别的完整性来执行读操作。
        /// 这类似于POSIX中`O_RSYNC`。
        ///
        /// WASI尚未定义此操作的精确语义。目前，它应被解析为请求(request)，而不是要求(requirement)。
        /// requested-write-sync，更改目录模式(Mutating directories mode)：目录内容可能会发生变化。
        ///
        /// 当这个标志在描述符上未设置时，
        /// 使用描述符的操作将创建、重命名、删除、修改文件系统对象的数据或元数据，或获取允许这些操作的另一个句柄，
        /// 如果它们本来会成功的话，则将以`error-code::read-only`失败。
        ///
        /// 这只能在目录上设置。
        mutate-directory,
    }

    /// 文件属性(File attributes)。
    ///
    /// 注意：在WASI的早期版本中，这被称为`filestat`。
    @since(version = 0.2.0)
    record descriptor-stat {
        /// 文件类型(File type)。
        %type: descriptor-type,
        /// 文件硬链接数量(Number of hard links to the file)。
        link-count: link-count,
        /// 对于普通文件，指的是以字节为单位的文件大小。
        /// 对于符号链接，指的是符号链接中包含的路径名(pathname)的字节长度。
        size: filesize,
        /// 最后一次数据访问时间戳。
        ///
        /// 如果`option`为none，则平台不维护该文件的访问时间戳。
        data-access-timestamp: option<datetime>,
        /// 最后一次数据修改时间戳。
        ///
        /// 如果`option`为none，则平台不维护该文件的修改时间戳。
        data-modification-timestamp: option<datetime>,
        /// 最后一次文件状态更改时间戳。
        ///
        /// 如果`option`为none，则平台不维护该文件的状态更改时间戳。
        status-change-timestamp: option<datetime>,
    }

    /// 确定路径解析方法的标志。
    @since(version = 0.2.0)
    flags path-flags {
        /// 只要解析的路径对应符号链接，它就被展开。
        symlink-follow,
    }

    /// 用于`open-at`的打开标志。
    @since(version = 0.2.0)
    flags open-flags {
        /// 如果文件不存在则创建，类似于POSIX中的`O_CREAT`。
        create,
        /// 如果不是目录则失败，类似于POSIX中的`O_DIRECTORY`。
        directory,
        /// 如果文件已存在则失败，类似于POSIX中的`O_EXCL`。
        exclusive,
        /// 文件尺寸截断为0，类似于POSIX中的`O_TRUNC`。
        truncate,
    }

    /// 指向索引节点(inode)的硬链接(hard links)数量。
    @since(version = 0.2.0)
    type link-count = u64;

    /// 当设置时间戳时，它表示要设置的值。
    @since(version = 0.2.0)
    variant new-timestamp {
        /// 将时间戳设置为之前的值。
        no-change,
        /// 将时间戳设置为与文件系统关联的系统时钟的当前时间。
        now,
        /// 将时间戳设置为给定值。
        timestamp(datetime),
    }

    /// 目录项。
    record directory-entry {
        /// 该目录项引用的文件类型。
        %type: descriptor-type,

        /// 对象名称。
        name: string,
    }

    /// 函数返回的错误码，类似于POSIX中的`errno`。
    /// 并非所有这些错误码都由此API提供的函数返回；
    /// 其中一些用于更高级库层，而其他一些仅用于与POSIX对齐。
    enum error-code {
        /// 权限被拒绝，类似于POSIX中的`EACCES`。
        access,
        /// 资源不可用，或操作将阻塞，类似于POSIX中的`EAGAIN`和`EWOULDBLOCK`。
        would-block,
        /// 连接已在进行中，类似于POSIX中的`EALREADY`。
        already,
        /// 错误的描述符，类似于POSIX中的`EBADF`。
        bad-descriptor,
        /// 设备或资源繁忙，类似于POSIX中的`EBUSY`。
        busy,
        /// 资源死锁将发生，类似于POSIX中的`EDEADLK`。
        deadlock,
        /// 超出存储配额，类似于POSIX中的`EDQUOT`。
        quota,
        /// 文件存在，类似于POSIX中的`EEXIST`。
        exist,
        /// 文件过大，类似于POSIX中的`EFBIG`。
        file-too-large,
        /// 非法字符序列，类似于POSIX中的`EILSEQ`。
        illegal-byte-sequence,
        /// 进行中的操作，类似于POSIX中的`EINPROGRESS`。
        in-progress,
        /// 中断函数，类似于POSIX中的`EINTR`。
        interrupted,
        /// 无效参数，类似于POSIX中的`EINVAL`。
        invalid,
        /// I/O错误，类似于POSIX中的`EIO`。
        io,
        /// 是一个目录，类似于POSIX中的`EISDIR`。
        is-directory,
        /// 符号链接层级过多，类似于POSIX中的`ELOOP`。
        loop,
        /// 链接过多，类似于POSIX中的`EMLINK`。
        too-many-links,
        /// 消息过大，类似于POSIX中的`EMSGSIZE`。
        message-size,
        /// 文件名过长，类似于POSIX中的`ENAMETOOLONG`。
        name-too-long,
        /// 无此设备，类似于POSIX中的`ENODEV`。
        no-device,
        /// 无此文件或目录，类似于POSIX中的`ENOENT`。
        no-entry,
        /// 无可用锁，类似于POSIX中的`ENOLCK`。
        no-lock,
        /// 空间不足，类似于POSIX中的`ENOMEM`。
        insufficient-memory,
        /// 设备上无剩余空间，类似于POSIX中的`ENOSPC`。
        insufficient-space,
        /// 不是目录或指向目录的符号链接，类似于POSIX中的`ENOTDIR`。
        not-directory,
        /// 目录非空，类似于POSIX中的`ENOTEMPTY`。
        not-empty,
        /// 状态无法恢复，类似于POSIX中的`ENOTRECOVERABLE`。
        not-recoverable,
        /// 不支持，类似于POSIX中的`ENOTSUP`和`ENOSYS`。
        unsupported,
        /// 不适当的I/O控制操作，类似于POSIX中的`ENOTTY`。
        no-tty,
        /// 无此设备或地址，类似于POSIX中的`ENXIO`。
        no-such-device,
        /// 值过大无法存储在数据类型中，类似于POSIX中的`EOVERFLOW`。
        overflow,
        /// 操作不允许，类似于POSIX中的`EPERM`。
        not-permitted,
        /// 管道中断，类似于POSIX中的`EPIPE`。
        pipe,
        /// 只读文件系统，类似于POSIX中的`EROFS`。
        read-only,
        /// 无效查找，类似于POSIX中的`ESPIPE`。
        invalid-seek,
        /// 文本文件繁忙，类似于POSIX中的`ETXTBSY`。
        text-file-busy,
        /// 跨设备链接，类似于POSIX中的`EXDEV`。
        cross-device,
    }

    /// 文件或内存访问模式的建议信息。
    @since(version = 0.2.0)
    enum advice {
        /// 应用程序对其与指定数据相关的行为没有建议。
        normal,
        /// 应用程序期望以低偏移量到高偏移量顺序访问指定的数据。
        sequential,
        /// 应用程序期望以随机顺序访问指定的数据。
        random,
        /// 应用程序期望在不久的将来访问指定的数据。
        will-need,
        /// 应用程序预计在不久的将来不会访问指定的数据。
        dont-need,
        /// 应用程序期望访问指定的数据一次，然后不再使用它。
        no-reuse,
    }

    /// 一个128位的哈希值，因为wasm没有128位的整数类型而被分成几个部分。
    @since(version = 0.2.0)
    record metadata-hash-value {
       /// 128位哈希值中的64位。
       lower: u64,
       /// 128位哈希值中的另外64位。
       upper: u64,
    }

    /// 描述符是对文件系统对象的引用，该对象可以是文件、目录、命名管道、特殊文件或可以对其进行文件系统调用的其他对象。
    @since(version = 0.2.0)
    resource descriptor {
        /// 如果可用，返回用于读取文件的流。
        ///
        /// 可能会以error-code失败，描述为什么无法读取文件。
        ///
        /// 多个读、写和追加流可能活动于同一个打开的文件，并且它们不会相互干扰。
        ///
        /// 注意：其允许使用`read-stream`，类似于POSIX中的`read`。
        @since(version = 0.2.0)
        read-via-stream: func(
            /// 开始读取文件的偏移量。
            offset: filesize,
        ) -> result<input-stream, error-code>;

        /// 如果可用，返回用于写入文件的流。
        ///
        /// 可能会以error-code失败，描述为什么无法写入文件。
        ///
        /// 注意：其允许使用`write-stream`，类似于POSIX中的`write`。
        @since(version = 0.2.0)
        write-via-stream: func(
            /// 开始写入文件的偏移量。
            offset: filesize,
        ) -> result<output-stream, error-code>;

        /// 如果可用，返回用于追加文件的流。
        ///
        /// 可能会以error-code失败，描述为什么无法追加文件。
        ///
        /// 注意：其允许使用`write-stream`，类似于POSIX中的`write`。
        @since(version = 0.2.0)
        append-via-stream: func() -> result<output-stream, error-code>;

        /// 在描述符上提供文件建议信息。
        ///
        /// 类似于POSIX中的`posix_fadvise`。
        @since(version = 0.2.0)
        advise: func(
            /// 建议适用的文件内偏移量。
            offset: filesize,
            /// 建议适用的区域(region)的长度。
            length: filesize,
            /// The advice.
            advice: advice
        ) -> result<_, error-code>;

        /// 同步文件数据至磁盘。
        ///
        /// 如果文件描述符未打开写入，则此函数会成功但没有效果。
        ///
        /// 注意：其类似于POSIX中的`fdatasync`。
        @since(version = 0.2.0)
        sync-data: func() -> result<_, error-code>;

        /// 获取与描述符关联的标志。
        ///
        /// 注意：其返回的标志类似于POSIX中的`fcntl(fd, F_GETFL)`。
        ///
        /// 注意：该值在WASI的早期版本中是`fdstat_get`的返回值`fs_flags`。
        @since(version = 0.2.0)
        get-flags: func() -> result<descriptor-flags, error-code>;

        /// 获取描述符的动态类型。
        ///
        /// 注意：此返回与`stat`、`stat-at`等返回的`fd-stat`d的 `type`字段的值相同。
        ///
        /// 注意：此返回的标志类似于POSIX中`fstat`提供的`st_mode & S_IFMT`值。
        ///
        /// 注意：此返回的值是早期 WASI 版本中`fdstat_get`返回的`fs_filetype`值。
        @since(version = 0.2.0)
        get-type: func() -> result<descriptor-type, error-code>;

        /// 调整已打开文件的大小。如果增加文件的大小，额外的字节将被填充为零。
        ///
        /// 注意：在早期版本的 WASI 中，这被称为 `fd_filestat_set_size`。
        @since(version = 0.2.0)
        set-size: func(size: filesize) -> result<_, error-code>;

        /// 调整已打开文件或目录的时间戳。
        ///
        /// 注意：其类似于POSIX中的`futimens`。
        ///
        /// 注意：在早期版本的 WASI 中，这被称为 `fd_filestat_set_times`。
        @since(version = 0.2.0)
        set-times: func(
            /// 所需的数据访问时间戳的值。
            data-access-timestamp: new-timestamp,
            /// 所需的数据修改时间戳的值。
            data-modification-timestamp: new-timestamp,
        ) -> result<_, error-code>;

        /// 在不使用和更新描述符的偏移量的情况下，从描述符中读取数据。
        ///
        /// 该函数返回一个字节列表，包含已读取的数据，
        /// 以及一个布尔值，当布尔值为true，表示已达到文件末尾。
        /// 返回的列表将包含最多length字节；
        /// 如果达到文件末尾或者 I/O 操作被中断，可能会返回少于请求的字节数。
        ///
        /// 将来，可能会更改为返回`stream<u8, error-code>`。
        ///
        /// 注意：其类似于POSIX中的`pread`。
        @since(version = 0.2.0)
        read: func(
            /// 读取的最大字节数
            length: filesize,
            /// 读取的文件内偏移量。
            offset: filesize,
        ) -> result<tuple<list<u8>, bool>, error-code>;

        /// 在不使用和更新描述符的偏移量的情况下，向描述符写入数据。
        ///
        /// 可以向文件末尾写入数据；
        /// 文件会被扩展到写入的范围，并且在先前末尾和写入开始之间的字节会被设置为零。
        ///
        /// 将来，可能会更改为返回`stream<u8, error-code>`。
        ///
        /// 注意：其类似于POSIX中的`pwrite`。
        @since(version = 0.2.0)
        write: func(
            /// 写入的数据
            buffer: list<u8>,
            /// 写入的文件内偏移量。
            offset: filesize,
        ) -> result<filesize, error-code>;

        /// 从目录中读取目录条目。
        ///
        /// 在文件系统中，如果目录包含指向自身和其父目录的条目，
        /// 通常分别命名为`.`和`..`，这些条目将被省略。
        ///
        /// 这总是返回一个新的流，该流从目录的开头开始。同一目录上可以有多个活动的流，它们不会相互干扰。
        @since(version = 0.2.0)
        read-directory: func() -> result<directory-entry-stream, error-code>;

        /// 同步文件的数据和元数据至磁盘。
        ///
        /// 如果文件描述符未打开写入，则此函数会成功但没有效果。
        ///
        /// 注意：其类似于POSIX中的`fsync`。
        @since(version = 0.2.0)
        sync: func() -> result<_, error-code>;

        /// 创建目录。
        ///
        /// 注意：其类似于POSIX中的`mkdirat`。
        @since(version = 0.2.0)
        create-directory-at: func(
            /// 创建目录的相对路径。
            path: string,
        ) -> result<_, error-code>;

        /// 返回已打开文件或目录的属性。
        ///
        /// 注意：其类似于POSIX中的`fstat`，除了它不返回设备和索引节点的信息。
        /// 要测试两个文件描述符是否指向同一底层文件系统对象，使用`is-same-object`。
        /// 要获取其他可以用来确定文件是否已被修改的数据，使用`metadata-hash`。
        ///
        /// 注意：在早期的WASI版本中被称为`fd_filestat_get`。
        @since(version = 0.2.0)
        stat: func() -> result<descriptor-stat, error-code>;

        /// 返回文件或目录的属性。
        ///
        /// 注意：其类似于POSIX中的`fstatat`，除了它不返回设备和索引节点的信息。
        /// 请参阅`stat`描述中关于替代方案的讨论。
        ///
        /// 注意：在早期的WASI版本中被称为`path_filestat_get`。
        @since(version = 0.2.0)
        stat-at: func(
            /// 确定路径解析方法的标志。
            path-flags: path-flags,
            /// 要检查的文件或目录的相对路径。
            path: string,
        ) -> result<descriptor-stat, error-code>;

        /// 调整文件或目录的时间戳。
        ///
        /// 注意：其类似于POSIX中的`utimensat`。
        ///
        /// 注意：在早期的WASI版本中被称为`path_filestat_set_times`。
        @since(version = 0.2.0)
        set-times-at: func(
            /// 确定路径解析方法的标志。
            path-flags: path-flags,
            /// 要操作的文件或目录的相对路径。
            path: string,
            /// 所需的数据访问时间戳的值。
            data-access-timestamp: new-timestamp,
            /// 所需的数据修改时间戳的值。
            data-modification-timestamp: new-timestamp,
        ) -> result<_, error-code>;

        /// 创建硬链接(hard link)。
        ///
        /// 注意：其类似于POSIX中的`linkat`。
        @since(version = 0.2.0)
        link-at: func(
            /// 确定路径解析方法的标志。
            old-path-flags: path-flags,
            /// 要链接的相对源路径。
            old-path: string,
            /// `new-path`的基目录。
            new-descriptor: borrow<descriptor>,
            /// 要创建硬链接的相对目标路径。
            new-path: string,
        ) -> result<_, error-code>;

        /// 打开文件或目录。
        ///
        /// 返回的描述符不能保证是当前未打开的最低编号(lowest-numbered)描述符，
        /// 它是随机的以防止应用程序依赖于对索引的假设，因为在多线程环境中这样做是容易出错的。
        /// 返回的描述符保证小于2**31。
        ///
        /// 如果`flags`包含`descriptor-flags::mutate-directory`，
        /// 并且基础描述符没有设置`descriptor-flags::mutate-directory`，
        /// 则`open-at`将失败，并返回`error-code::read-only`。

        ///
        /// 如果`flags`包含`write`或`mutate-directory`，或者`open-flags`包含`truncate`或`create`，
        /// 并且基础描述符没有设置 `descriptor-flags::mutate-directory`，
        /// 则 `open-at`将失败，并返回`error-code::read-only`。
        ///
        /// 注意：其类似于POSIX中的`openat`。
        @since(version = 0.2.0)
        open-at: func(
            /// 确定路径解析方法的标志。
            path-flags: path-flags,
            /// 要打开的对象的相对路径。
            path: string,
            /// 打开文件的方法。
            open-flags: open-flags,
            /// 用于结果描述符的标志。
            %flags: descriptor-flags,
        ) -> result<descriptor, error-code>;

        /// 读取符号连接的内容。
        ///
        /// 如果内容包含底层文件系统中的绝对路径或根路径，
        /// 此函数将失败，并返回 `error-code::not-permitted`。
        ///
        /// 注意：其类似于POSIX中的`readlinkat`。
        @since(version = 0.2.0)
        readlink-at: func(
            /// 要读取的符号链接的相对路径。
            path: string,
        ) -> result<string, error-code>;

        /// 删除目录。
        ///
        /// 如果目录非空，返回`error-code::not-empty`。
        ///
        /// 注意：其类似于POSIX中的`unlinkat(fd, path, AT_REMOVEDIR)`。
        @since(version = 0.2.0)
        remove-directory-at: func(
            /// 要删除目录的相对路径。
            path: string,
        ) -> result<_, error-code>;

        /// 读取文件系统对象。
        ///
        /// 注意：其类似于POSIX中的`renameat`。
        @since(version = 0.2.0)
        rename-at: func(
            /// 要重命名的文件或目录的相对源路径。
            old-path: string,
            /// `new-path`的基目录。
            new-descriptor: borrow<descriptor>,
            /// 要重命名的文件或目录的相对目标路径。
            new-path: string,
        ) -> result<_, error-code>;

        /// 创建符号链接（symbolic link，也称为“symlink”）
        ///
        /// 如果`old-path`以`/`开头，此函数将失败并返回`error-code::not-permitted`。
        ///
        /// 注意：其类似于POSIX中的`symlinkat`。
        @since(version = 0.2.0)
        symlink-at: func(
            /// 符号连接的内容。
            old-path: string,
            /// 要创建符号链接的相对目标路径。
            new-path: string,
        ) -> result<_, error-code>;

        /// 取消链接为不是目录的文件系统对象。
        ///
        /// 如果路径指向一个目录，则返回`error-code::is-directory`。
        /// 注意：其类似于POSIX中的`unlinkat(fd, path, 0)`。
        @since(version = 0.2.0)
        unlink-file-at: func(
            /// 要取消链接的文件的相对路径。
            path: string,
        ) -> result<_, error-code>;

        /// 测试两个描述符是否引用同一个文件系统对象。
        ///
        /// 在POSIX中，这相当于测试两个描述符是否具有相同的设备号（`st_dev`）和索引节点号（`st_ino`或`d_ino`）。
        /// wasi-filesystem 不公开设备号和索引节点号，因此可以使用这个函数来代替。
        @since(version = 0.2.0)
        is-same-object: func(other: borrow<descriptor>) -> bool;

        /// 返回由描述符引用的文件系统对象相关元数据的哈希值。
        ///
        /// 这返回一个由最后修改时间戳和文件大小组成的哈希值，
        /// 还可能包括索引节点号、设备号、创建时间戳等在文件修改或替换时可能发生变化的元数据字段。
        /// 它还可能包含由实现选择的并且不会其他方式暴露的秘密值。
        ///
        /// 实现应该提供以下属性：
        ///
        /// - 如果文件未被修改或替换，计算得到的哈希值通常不应改变。
        /// - 如果对象被修改或替换，计算得到的哈希值通常应该改变。
        /// - 哈希的输入不应该从计算得到的哈希值轻易计算出来。
        ///
        /// 然而，这些都不是必须的。
        @since(version = 0.2.0)
        metadata-hash: func() -> result<metadata-hash-value, error-code>;

        /// 返回由目录描述符和相对路径引用的文件系统对象相关元数据的哈希值。
        ///
        /// 这执行与`metadata-hash`相同的元数据哈希计算。
        @since(version = 0.2.0)
        metadata-hash-at: func(
            /// 确定路径解析方法的标志。
            path-flags: path-flags,
            /// 要检查的文件或目录的相对路径。
            path: string,
        ) -> result<metadata-hash-value, error-code>;
    }

    /// 目录项的流。
    @since(version = 0.2.0)
    resource directory-entry-stream {
        /// 从`directory-entry-stream`中读取单个目录项。
        @since(version = 0.2.0)
        read-directory-entry: func() -> result<option<directory-entry>, error-code>;
    }

    /// 尝试从提供的流`error`中提取与文件系统相关的`error-code`。
    ///
    /// 流操作返回`stream-error::last-operation-failed`时，其载荷包含有关失败操作的更多信息。
    /// 可以将此载荷传递给此函数，以查看是否有关于文件系统的错误信息可返回。
    ///
    /// 请注意，此函数可能会失败，因为并非所有与流相关的错误都是与文件系统相关的错误。
    @since(version = 0.2.0)
    filesystem-error-code: func(err: borrow<error>) -> option<error-code>;
}
